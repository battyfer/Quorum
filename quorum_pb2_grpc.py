# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import quorum_pb2 as quorum__pb2


class RegistryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterReplica = channel.unary_unary(
                '/quorum.Registry/RegisterReplica',
                request_serializer=quorum__pb2.Replica.SerializeToString,
                response_deserializer=quorum__pb2.RegisterResponse.FromString,
                )
        self.GetReadReplicas = channel.unary_unary(
                '/quorum.Registry/GetReadReplicas',
                request_serializer=quorum__pb2.Empty.SerializeToString,
                response_deserializer=quorum__pb2.ReplicaList.FromString,
                )
        self.GetWriteReplicas = channel.unary_unary(
                '/quorum.Registry/GetWriteReplicas',
                request_serializer=quorum__pb2.Empty.SerializeToString,
                response_deserializer=quorum__pb2.ReplicaList.FromString,
                )
        self.GetAllReplicas = channel.unary_unary(
                '/quorum.Registry/GetAllReplicas',
                request_serializer=quorum__pb2.Empty.SerializeToString,
                response_deserializer=quorum__pb2.ReplicaList.FromString,
                )


class RegistryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterReplica(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReadReplicas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWriteReplicas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllReplicas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegistryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterReplica,
                    request_deserializer=quorum__pb2.Replica.FromString,
                    response_serializer=quorum__pb2.RegisterResponse.SerializeToString,
            ),
            'GetReadReplicas': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReadReplicas,
                    request_deserializer=quorum__pb2.Empty.FromString,
                    response_serializer=quorum__pb2.ReplicaList.SerializeToString,
            ),
            'GetWriteReplicas': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWriteReplicas,
                    request_deserializer=quorum__pb2.Empty.FromString,
                    response_serializer=quorum__pb2.ReplicaList.SerializeToString,
            ),
            'GetAllReplicas': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllReplicas,
                    request_deserializer=quorum__pb2.Empty.FromString,
                    response_serializer=quorum__pb2.ReplicaList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'quorum.Registry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Registry(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quorum.Registry/RegisterReplica',
            quorum__pb2.Replica.SerializeToString,
            quorum__pb2.RegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetReadReplicas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quorum.Registry/GetReadReplicas',
            quorum__pb2.Empty.SerializeToString,
            quorum__pb2.ReplicaList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWriteReplicas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quorum.Registry/GetWriteReplicas',
            quorum__pb2.Empty.SerializeToString,
            quorum__pb2.ReplicaList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllReplicas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quorum.Registry/GetAllReplicas',
            quorum__pb2.Empty.SerializeToString,
            quorum__pb2.ReplicaList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class Replica_ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Write = channel.unary_unary(
                '/quorum.Replica_Service/Write',
                request_serializer=quorum__pb2.WriteRequest.SerializeToString,
                response_deserializer=quorum__pb2.WriteResponse.FromString,
                )
        self.Read = channel.unary_unary(
                '/quorum.Replica_Service/Read',
                request_serializer=quorum__pb2.ReadRequest.SerializeToString,
                response_deserializer=quorum__pb2.ReadResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/quorum.Replica_Service/Delete',
                request_serializer=quorum__pb2.DeleteRequest.SerializeToString,
                response_deserializer=quorum__pb2.DeleteResponse.FromString,
                )


class Replica_ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Replica_ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=quorum__pb2.WriteRequest.FromString,
                    response_serializer=quorum__pb2.WriteResponse.SerializeToString,
            ),
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=quorum__pb2.ReadRequest.FromString,
                    response_serializer=quorum__pb2.ReadResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=quorum__pb2.DeleteRequest.FromString,
                    response_serializer=quorum__pb2.DeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'quorum.Replica_Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Replica_Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quorum.Replica_Service/Write',
            quorum__pb2.WriteRequest.SerializeToString,
            quorum__pb2.WriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quorum.Replica_Service/Read',
            quorum__pb2.ReadRequest.SerializeToString,
            quorum__pb2.ReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quorum.Replica_Service/Delete',
            quorum__pb2.DeleteRequest.SerializeToString,
            quorum__pb2.DeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
